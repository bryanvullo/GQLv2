-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------

state 4 contains 2 shift/reduce conflicts.
state 50 contains 6 shift/reduce conflicts.
state 51 contains 6 shift/reduce conflicts.
state 52 contains 6 shift/reduce conflicts.
state 53 contains 6 shift/reduce conflicts.
state 54 contains 6 shift/reduce conflicts.
state 55 contains 6 shift/reduce conflicts.
state 56 contains 6 reduce/reduce conflicts.
state 57 contains 6 reduce/reduce conflicts.
state 64 contains 6 shift/reduce conflicts.
state 67 contains 1 shift/reduce conflicts.
state 79 contains 6 shift/reduce conflicts.

terminal Reg is unused
terminal '"' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> XX                                (0)
	XX -> X                                            (1)
	XX -> X XX                                         (2)
	X -> Y ';'                                         (3)
	X -> ConditionX                                    (4)
	X -> LoopFX                                        (5)
	Y -> Class ident '=' Y                             (6)
	Y -> ident '=' Y                                   (7)
	Y -> Class ident                                   (8)
	Y -> ident                                         (9)
	Y -> num                                           (10)
	Y -> FIdent                                        (11)
	Y -> chars                                         (12)
	Y -> ident '.' FIND '(' ident '->' YBool ')'       (13)
	Y -> ident '.' ARITH '(' AddGrN ')'                (14)
	Y -> ACCESS chars                                  (15)
	Y -> OUT '(' ident ')'                             (16)
	Y -> YBool                                         (17)
	Y -> ident '.' ident                               (18)
	Y -> ident '.' FIdent                              (19)
	YBool -> True                                      (20)
	YBool -> False                                     (21)
	YBool -> Y '==' Y                                  (22)
	YBool -> Y '!=' Y                                  (23)
	YBool -> Y '<' Y                                   (24)
	YBool -> Y '>' Y                                   (25)
	YBool -> Y '<=' Y                                  (26)
	YBool -> Y '>=' Y                                  (27)
	YBool -> YBool '&&' YBool                          (28)
	YBool -> YBool '||' YBool                          (29)
	YBool -> '-' '[' YBool ']' '->' ident              (30)
	YBool -> ident '-' '[' YBool ']' '->'              (31)
	YBool -> '(' YBool ')'                             (32)
	YBool -> ident '-' '[' YBool ']' '->' ident        (33)
	YBool -> ident '.' FIdent '==' chars               (34)
	YBool -> ident '-' '[' YBool ']' '->' '_'          (35)
	YBool -> FIdent '=' chars                          (36)
	AddGrN -> ident                                    (37)
	AddGrN -> SetGrNNT                                 (38)
	SetGrNNT -> SetGrNT                                (39)
	SetGrNNT -> SetGrNT ',' SetGrNNT                   (40)
	SetGrNT -> ident '=' Y                             (41)
	SetGrNT -> FIdent '=' Y                            (42)
	SetGrNT -> ident '-' '[' SetGrNNT ']' '->' ident   (43)
	ConditionX -> CONDITION '(' YBool ')' '{' XX '}'   (44)
	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' CONDITIONELIF '{' XX '}'   (45)
	LoopFX -> LOOPF '(' Class ident ':' ident ')' '{' XX '}'   (46)
	Class -> Gr                                        (47)
	Class -> Num                                       (48)
	Class -> Chars                                     (49)
	Class -> B                                         (50)
	Class -> GrN                                       (51)
	Class -> Rel                                       (52)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	ACCESS         { Tok _ TokACCESS }
	FIND           { Tok _ TokFIND }
	OUT            { Tok _ TokOUT }
	CONDITION      { Tok _ TokCond }
	CONDITIONELIF  { Tok _ TokCondE }
	LOOPF          { Tok _ TokLoopF }
	ARITH          { Tok _ TokArith }
	Gr             { Tok _ TokGr }
	Num            { Tok _ TokNum }
	Chars          { Tok _ TokChars }
	B              { Tok _ TokB }
	FIdent         { Tok _ (TokFIdent $$) }
	GrN            { Tok _ TokGrN }
	Rel            { Tok _ TokRel }
	True           { Tok _ TokBT }
	False          { Tok _ TokBF }
	ident          { Tok _ (TokIdent $$) }
	num            { Tok _ (TokInt $$) }
	chars          { Tok _ (TokString $$) }
	Reg            { Tok _ (TokReg $$) }
	'"'            { Tok _ TokQuote }
	'&&'           { Tok _ TokConj }
	'||'           { Tok _ TokLogO }
	'('            { Tok _ TokBracketLeft }
	')'            { Tok _ TokBracketRight }
	';'            { Tok _ TokColS }
	'!='           { Tok _ TokIneq }
	','            { Tok _ TokSep }
	'.'            { Tok _ TokBrk }
	'>='           { Tok _ TokEqualityEqG }
	'<='           { Tok _ TokEqualityEqL }
	'>'            { Tok _ TokEqualityG }
	'<'            { Tok _ TokEqualityL }
	'='            { Tok _ TokSet }
	'=='           { Tok _ TokExact }
	'['            { Tok _ TokBracketLeftS }
	']'            { Tok _ TokBracketRightS }
	'->'           { Tok _ TokDirectedR }
	'-'            { Tok _ TokHyph }
	':'            { Tok _ TokHeaderColN }
	'{'            { Tok _ TokBracketLeftC }
	'}'            { Tok _ TokBracketRightC }
	'_'            { Tok _ TokUnderscore }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	XX              rules 1, 2
	X               rules 3, 4, 5
	Y               rules 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
	YBool           rules 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
	AddGrN          rules 37, 38
	SetGrNNT        rules 39, 40
	SetGrNT         rules 41, 42, 43
	ConditionX      rules 44, 45
	LoopFX          rule  46
	Class           rules 47, 48, 49, 50, 51, 52

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . XX                               (rule 0)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	CONDITION      shift, and enter state 10
	LOOPF          shift, and enter state 11
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	XX             goto state 26
	X              goto state 27
	Y              goto state 3
	YBool          goto state 4
	ConditionX     goto state 5
	LoopFX         goto state 6
	Class          goto state 7

State 1

	XX -> . X                                           (rule 1)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	CONDITION      shift, and enter state 10
	LOOPF          shift, and enter state 11
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	X              goto state 2
	Y              goto state 3
	YBool          goto state 4
	ConditionX     goto state 5
	LoopFX         goto state 6
	Class          goto state 7

State 2

	XX -> X .                                           (rule 1)



State 3

	X -> Y . ';'                                        (rule 3)
	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	';'            shift, and enter state 43
	'!='           shift, and enter state 44
	'>='           shift, and enter state 45
	'<='           shift, and enter state 46
	'>'            shift, and enter state 47
	'<'            shift, and enter state 48
	'=='           shift, and enter state 49


State 4

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)

	'&&'           shift, and enter state 41
			(reduce using rule 17)

	'||'           shift, and enter state 42
			(reduce using rule 17)

	')'            reduce using rule 17
	';'            reduce using rule 17
	'!='           reduce using rule 17
	','            reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17
	']'            reduce using rule 17


State 5

	X -> ConditionX .                                   (rule 4)

	ACCESS         reduce using rule 4
	OUT            reduce using rule 4
	CONDITION      reduce using rule 4
	LOOPF          reduce using rule 4
	Gr             reduce using rule 4
	Num            reduce using rule 4
	Chars          reduce using rule 4
	B              reduce using rule 4
	FIdent         reduce using rule 4
	GrN            reduce using rule 4
	Rel            reduce using rule 4
	True           reduce using rule 4
	False          reduce using rule 4
	ident          reduce using rule 4
	num            reduce using rule 4
	chars          reduce using rule 4
	'('            reduce using rule 4
	'-'            reduce using rule 4
	'}'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	X -> LoopFX .                                       (rule 5)

	ACCESS         reduce using rule 5
	OUT            reduce using rule 5
	CONDITION      reduce using rule 5
	LOOPF          reduce using rule 5
	Gr             reduce using rule 5
	Num            reduce using rule 5
	Chars          reduce using rule 5
	B              reduce using rule 5
	FIdent         reduce using rule 5
	GrN            reduce using rule 5
	Rel            reduce using rule 5
	True           reduce using rule 5
	False          reduce using rule 5
	ident          reduce using rule 5
	num            reduce using rule 5
	chars          reduce using rule 5
	'('            reduce using rule 5
	'-'            reduce using rule 5
	'}'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	Y -> Class . ident '=' Y                            (rule 6)
	Y -> Class . ident                                  (rule 8)

	ident          shift, and enter state 40


State 8

	Y -> ACCESS . chars                                 (rule 15)

	chars          shift, and enter state 39


State 9

	Y -> OUT . '(' ident ')'                            (rule 16)

	'('            shift, and enter state 38


State 10

	ConditionX -> CONDITION . '(' YBool ')' '{' XX '}'    (rule 44)
	ConditionX -> CONDITION . '(' YBool ')' '{' XX '}' CONDITIONELIF '{' XX '}'    (rule 45)

	'('            shift, and enter state 37


State 11

	LoopFX -> LOOPF . '(' Class ident ':' ident ')' '{' XX '}'    (rule 46)

	'('            shift, and enter state 36


State 12

	Class -> Gr .                                       (rule 47)

	ident          reduce using rule 47


State 13

	Class -> Num .                                      (rule 48)

	ident          reduce using rule 48


State 14

	Class -> Chars .                                    (rule 49)

	ident          reduce using rule 49


State 15

	Class -> B .                                        (rule 50)

	ident          reduce using rule 50


State 16

	Y -> FIdent .                                       (rule 11)
	YBool -> FIdent . '=' chars                         (rule 36)

	'&&'           reduce using rule 11
	'||'           reduce using rule 11
	')'            reduce using rule 11
	';'            reduce using rule 11
	'!='           reduce using rule 11
	','            reduce using rule 11
	'>='           reduce using rule 11
	'<='           reduce using rule 11
	'>'            reduce using rule 11
	'<'            reduce using rule 11
	'='            shift, and enter state 35
	'=='           reduce using rule 11
	']'            reduce using rule 11


State 17

	Class -> GrN .                                      (rule 51)

	ident          reduce using rule 51


State 18

	Class -> Rel .                                      (rule 52)

	ident          reduce using rule 52


State 19

	YBool -> True .                                     (rule 20)

	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	')'            reduce using rule 20
	';'            reduce using rule 20
	'!='           reduce using rule 20
	','            reduce using rule 20
	'>='           reduce using rule 20
	'<='           reduce using rule 20
	'>'            reduce using rule 20
	'<'            reduce using rule 20
	'=='           reduce using rule 20
	']'            reduce using rule 20


State 20

	YBool -> False .                                    (rule 21)

	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	')'            reduce using rule 21
	';'            reduce using rule 21
	'!='           reduce using rule 21
	','            reduce using rule 21
	'>='           reduce using rule 21
	'<='           reduce using rule 21
	'>'            reduce using rule 21
	'<'            reduce using rule 21
	'=='           reduce using rule 21
	']'            reduce using rule 21


State 21

	Y -> ident . '=' Y                                  (rule 7)
	Y -> ident .                                        (rule 9)
	Y -> ident . '.' FIND '(' ident '->' YBool ')'      (rule 13)
	Y -> ident . '.' ARITH '(' AddGrN ')'               (rule 14)
	Y -> ident . '.' ident                              (rule 18)
	Y -> ident . '.' FIdent                             (rule 19)
	YBool -> ident . '-' '[' YBool ']' '->'             (rule 31)
	YBool -> ident . '-' '[' YBool ']' '->' ident       (rule 33)
	YBool -> ident . '.' FIdent '==' chars              (rule 34)
	YBool -> ident . '-' '[' YBool ']' '->' '_'         (rule 35)

	'&&'           reduce using rule 9
	'||'           reduce using rule 9
	')'            reduce using rule 9
	';'            reduce using rule 9
	'!='           reduce using rule 9
	','            reduce using rule 9
	'.'            shift, and enter state 32
	'>='           reduce using rule 9
	'<='           reduce using rule 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	'='            shift, and enter state 33
	'=='           reduce using rule 9
	']'            reduce using rule 9
	'-'            shift, and enter state 34


State 22

	Y -> num .                                          (rule 10)

	'&&'           reduce using rule 10
	'||'           reduce using rule 10
	')'            reduce using rule 10
	';'            reduce using rule 10
	'!='           reduce using rule 10
	','            reduce using rule 10
	'>='           reduce using rule 10
	'<='           reduce using rule 10
	'>'            reduce using rule 10
	'<'            reduce using rule 10
	'=='           reduce using rule 10
	']'            reduce using rule 10


State 23

	Y -> chars .                                        (rule 12)

	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	')'            reduce using rule 12
	';'            reduce using rule 12
	'!='           reduce using rule 12
	','            reduce using rule 12
	'>='           reduce using rule 12
	'<='           reduce using rule 12
	'>'            reduce using rule 12
	'<'            reduce using rule 12
	'=='           reduce using rule 12
	']'            reduce using rule 12


State 24

	YBool -> '(' . YBool ')'                            (rule 32)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 31
	Class          goto state 7

State 25

	YBool -> '-' . '[' YBool ']' '->' ident             (rule 30)

	'['            shift, and enter state 29


State 26

	%start_parser -> XX .                               (rule 0)

	%eof           accept


State 27

	XX -> X .                                           (rule 1)
	XX -> X . XX                                        (rule 2)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	CONDITION      shift, and enter state 10
	LOOPF          shift, and enter state 11
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25
	'}'            reduce using rule 1
	%eof           reduce using rule 1

	XX             goto state 28
	X              goto state 27
	Y              goto state 3
	YBool          goto state 4
	ConditionX     goto state 5
	LoopFX         goto state 6
	Class          goto state 7

State 28

	XX -> X XX .                                        (rule 2)

	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 29

	YBool -> '-' '[' . YBool ']' '->' ident             (rule 30)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 70
	Class          goto state 7

State 30

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'!='           shift, and enter state 44
	'>='           shift, and enter state 45
	'<='           shift, and enter state 46
	'>'            shift, and enter state 47
	'<'            shift, and enter state 48
	'=='           shift, and enter state 49


State 31

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)
	YBool -> '(' YBool . ')'                            (rule 32)

	'&&'           shift, and enter state 41
	'||'           shift, and enter state 42
	')'            shift, and enter state 69
	'!='           reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17


State 32

	Y -> ident '.' . FIND '(' ident '->' YBool ')'      (rule 13)
	Y -> ident '.' . ARITH '(' AddGrN ')'               (rule 14)
	Y -> ident '.' . ident                              (rule 18)
	Y -> ident '.' . FIdent                             (rule 19)
	YBool -> ident '.' . FIdent '==' chars              (rule 34)

	FIND           shift, and enter state 65
	ARITH          shift, and enter state 66
	FIdent         shift, and enter state 67
	ident          shift, and enter state 68


State 33

	Y -> ident '=' . Y                                  (rule 7)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 64
	YBool          goto state 4
	Class          goto state 7

State 34

	YBool -> ident '-' . '[' YBool ']' '->'             (rule 31)
	YBool -> ident '-' . '[' YBool ']' '->' ident       (rule 33)
	YBool -> ident '-' . '[' YBool ']' '->' '_'         (rule 35)

	'['            shift, and enter state 63


State 35

	YBool -> FIdent '=' . chars                         (rule 36)

	chars          shift, and enter state 62


State 36

	LoopFX -> LOOPF '(' . Class ident ':' ident ')' '{' XX '}'    (rule 46)

	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18

	Class          goto state 61

State 37

	ConditionX -> CONDITION '(' . YBool ')' '{' XX '}'    (rule 44)
	ConditionX -> CONDITION '(' . YBool ')' '{' XX '}' CONDITIONELIF '{' XX '}'    (rule 45)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 60
	Class          goto state 7

State 38

	Y -> OUT '(' . ident ')'                            (rule 16)

	ident          shift, and enter state 59


State 39

	Y -> ACCESS chars .                                 (rule 15)

	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	')'            reduce using rule 15
	';'            reduce using rule 15
	'!='           reduce using rule 15
	','            reduce using rule 15
	'>='           reduce using rule 15
	'<='           reduce using rule 15
	'>'            reduce using rule 15
	'<'            reduce using rule 15
	'=='           reduce using rule 15
	']'            reduce using rule 15


State 40

	Y -> Class ident . '=' Y                            (rule 6)
	Y -> Class ident .                                  (rule 8)

	'&&'           reduce using rule 8
	'||'           reduce using rule 8
	')'            reduce using rule 8
	';'            reduce using rule 8
	'!='           reduce using rule 8
	','            reduce using rule 8
	'>='           reduce using rule 8
	'<='           reduce using rule 8
	'>'            reduce using rule 8
	'<'            reduce using rule 8
	'='            shift, and enter state 58
	'=='           reduce using rule 8
	']'            reduce using rule 8


State 41

	YBool -> YBool '&&' . YBool                         (rule 28)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 57
	Class          goto state 7

State 42

	YBool -> YBool '||' . YBool                         (rule 29)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 56
	Class          goto state 7

State 43

	X -> Y ';' .                                        (rule 3)

	ACCESS         reduce using rule 3
	OUT            reduce using rule 3
	CONDITION      reduce using rule 3
	LOOPF          reduce using rule 3
	Gr             reduce using rule 3
	Num            reduce using rule 3
	Chars          reduce using rule 3
	B              reduce using rule 3
	FIdent         reduce using rule 3
	GrN            reduce using rule 3
	Rel            reduce using rule 3
	True           reduce using rule 3
	False          reduce using rule 3
	ident          reduce using rule 3
	num            reduce using rule 3
	chars          reduce using rule 3
	'('            reduce using rule 3
	'-'            reduce using rule 3
	'}'            reduce using rule 3
	%eof           reduce using rule 3


State 44

	YBool -> Y '!=' . Y                                 (rule 23)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 55
	YBool          goto state 4
	Class          goto state 7

State 45

	YBool -> Y '>=' . Y                                 (rule 27)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 54
	YBool          goto state 4
	Class          goto state 7

State 46

	YBool -> Y '<=' . Y                                 (rule 26)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 53
	YBool          goto state 4
	Class          goto state 7

State 47

	YBool -> Y '>' . Y                                  (rule 25)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 52
	YBool          goto state 4
	Class          goto state 7

State 48

	YBool -> Y '<' . Y                                  (rule 24)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 51
	YBool          goto state 4
	Class          goto state 7

State 49

	YBool -> Y '==' . Y                                 (rule 22)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 50
	YBool          goto state 4
	Class          goto state 7

State 50

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y '==' Y .                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	')'            reduce using rule 22
	';'            reduce using rule 22
	'!='           shift, and enter state 44
			(reduce using rule 22)

	','            reduce using rule 22
	'>='           shift, and enter state 45
			(reduce using rule 22)

	'<='           shift, and enter state 46
			(reduce using rule 22)

	'>'            shift, and enter state 47
			(reduce using rule 22)

	'<'            shift, and enter state 48
			(reduce using rule 22)

	'=='           shift, and enter state 49
			(reduce using rule 22)

	']'            reduce using rule 22


State 51

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y '<' Y .                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	')'            reduce using rule 24
	';'            reduce using rule 24
	'!='           shift, and enter state 44
			(reduce using rule 24)

	','            reduce using rule 24
	'>='           shift, and enter state 45
			(reduce using rule 24)

	'<='           shift, and enter state 46
			(reduce using rule 24)

	'>'            shift, and enter state 47
			(reduce using rule 24)

	'<'            shift, and enter state 48
			(reduce using rule 24)

	'=='           shift, and enter state 49
			(reduce using rule 24)

	']'            reduce using rule 24


State 52

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y '>' Y .                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	')'            reduce using rule 25
	';'            reduce using rule 25
	'!='           shift, and enter state 44
			(reduce using rule 25)

	','            reduce using rule 25
	'>='           shift, and enter state 45
			(reduce using rule 25)

	'<='           shift, and enter state 46
			(reduce using rule 25)

	'>'            shift, and enter state 47
			(reduce using rule 25)

	'<'            shift, and enter state 48
			(reduce using rule 25)

	'=='           shift, and enter state 49
			(reduce using rule 25)

	']'            reduce using rule 25


State 53

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y '<=' Y .                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	')'            reduce using rule 26
	';'            reduce using rule 26
	'!='           shift, and enter state 44
			(reduce using rule 26)

	','            reduce using rule 26
	'>='           shift, and enter state 45
			(reduce using rule 26)

	'<='           shift, and enter state 46
			(reduce using rule 26)

	'>'            shift, and enter state 47
			(reduce using rule 26)

	'<'            shift, and enter state 48
			(reduce using rule 26)

	'=='           shift, and enter state 49
			(reduce using rule 26)

	']'            reduce using rule 26


State 54

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)
	YBool -> Y '>=' Y .                                 (rule 27)

	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	')'            reduce using rule 27
	';'            reduce using rule 27
	'!='           shift, and enter state 44
			(reduce using rule 27)

	','            reduce using rule 27
	'>='           shift, and enter state 45
			(reduce using rule 27)

	'<='           shift, and enter state 46
			(reduce using rule 27)

	'>'            shift, and enter state 47
			(reduce using rule 27)

	'<'            shift, and enter state 48
			(reduce using rule 27)

	'=='           shift, and enter state 49
			(reduce using rule 27)

	']'            reduce using rule 27


State 55

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y '!=' Y .                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	')'            reduce using rule 23
	';'            reduce using rule 23
	'!='           shift, and enter state 44
			(reduce using rule 23)

	','            reduce using rule 23
	'>='           shift, and enter state 45
			(reduce using rule 23)

	'<='           shift, and enter state 46
			(reduce using rule 23)

	'>'            shift, and enter state 47
			(reduce using rule 23)

	'<'            shift, and enter state 48
			(reduce using rule 23)

	'=='           shift, and enter state 49
			(reduce using rule 23)

	']'            reduce using rule 23


State 56

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)
	YBool -> YBool '||' YBool .                         (rule 29)

	'&&'           shift, and enter state 41
	'||'           shift, and enter state 42
	')'            reduce using rule 29
	';'            reduce using rule 29
	'!='           reduce using rule 29
			(reduce using rule 17)

	','            reduce using rule 29
	'>='           reduce using rule 29
			(reduce using rule 17)

	'<='           reduce using rule 29
			(reduce using rule 17)

	'>'            reduce using rule 29
			(reduce using rule 17)

	'<'            reduce using rule 29
			(reduce using rule 17)

	'=='           reduce using rule 29
			(reduce using rule 17)

	']'            reduce using rule 29


State 57

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool '&&' YBool .                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)

	'&&'           shift, and enter state 41
	'||'           reduce using rule 28
	')'            reduce using rule 28
	';'            reduce using rule 28
	'!='           reduce using rule 28
			(reduce using rule 17)

	','            reduce using rule 28
	'>='           reduce using rule 28
			(reduce using rule 17)

	'<='           reduce using rule 28
			(reduce using rule 17)

	'>'            reduce using rule 28
			(reduce using rule 17)

	'<'            reduce using rule 28
			(reduce using rule 17)

	'=='           reduce using rule 28
			(reduce using rule 17)

	']'            reduce using rule 28


State 58

	Y -> Class ident '=' . Y                            (rule 6)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 79
	YBool          goto state 4
	Class          goto state 7

State 59

	Y -> OUT '(' ident . ')'                            (rule 16)

	')'            shift, and enter state 78


State 60

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)
	ConditionX -> CONDITION '(' YBool . ')' '{' XX '}'    (rule 44)
	ConditionX -> CONDITION '(' YBool . ')' '{' XX '}' CONDITIONELIF '{' XX '}'    (rule 45)

	'&&'           shift, and enter state 41
	'||'           shift, and enter state 42
	')'            shift, and enter state 77
	'!='           reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17


State 61

	LoopFX -> LOOPF '(' Class . ident ':' ident ')' '{' XX '}'    (rule 46)

	ident          shift, and enter state 76


State 62

	YBool -> FIdent '=' chars .                         (rule 36)

	'&&'           reduce using rule 36
	'||'           reduce using rule 36
	')'            reduce using rule 36
	';'            reduce using rule 36
	'!='           reduce using rule 36
	','            reduce using rule 36
	'>='           reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'<'            reduce using rule 36
	'=='           reduce using rule 36
	']'            reduce using rule 36


State 63

	YBool -> ident '-' '[' . YBool ']' '->'             (rule 31)
	YBool -> ident '-' '[' . YBool ']' '->' ident       (rule 33)
	YBool -> ident '-' '[' . YBool ']' '->' '_'         (rule 35)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 75
	Class          goto state 7

State 64

	Y -> ident '=' Y .                                  (rule 7)
	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 7
	'||'           reduce using rule 7
	')'            reduce using rule 7
	';'            reduce using rule 7
	'!='           shift, and enter state 44
			(reduce using rule 7)

	','            reduce using rule 7
	'>='           shift, and enter state 45
			(reduce using rule 7)

	'<='           shift, and enter state 46
			(reduce using rule 7)

	'>'            shift, and enter state 47
			(reduce using rule 7)

	'<'            shift, and enter state 48
			(reduce using rule 7)

	'=='           shift, and enter state 49
			(reduce using rule 7)

	']'            reduce using rule 7


State 65

	Y -> ident '.' FIND . '(' ident '->' YBool ')'      (rule 13)

	'('            shift, and enter state 74


State 66

	Y -> ident '.' ARITH . '(' AddGrN ')'               (rule 14)

	'('            shift, and enter state 73


State 67

	Y -> ident '.' FIdent .                             (rule 19)
	YBool -> ident '.' FIdent . '==' chars              (rule 34)

	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	')'            reduce using rule 19
	';'            reduce using rule 19
	'!='           reduce using rule 19
	','            reduce using rule 19
	'>='           reduce using rule 19
	'<='           reduce using rule 19
	'>'            reduce using rule 19
	'<'            reduce using rule 19
	'=='           shift, and enter state 72
			(reduce using rule 19)

	']'            reduce using rule 19


State 68

	Y -> ident '.' ident .                              (rule 18)

	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	')'            reduce using rule 18
	';'            reduce using rule 18
	'!='           reduce using rule 18
	','            reduce using rule 18
	'>='           reduce using rule 18
	'<='           reduce using rule 18
	'>'            reduce using rule 18
	'<'            reduce using rule 18
	'=='           reduce using rule 18
	']'            reduce using rule 18


State 69

	YBool -> '(' YBool ')' .                            (rule 32)

	'&&'           reduce using rule 32
	'||'           reduce using rule 32
	')'            reduce using rule 32
	';'            reduce using rule 32
	'!='           reduce using rule 32
	','            reduce using rule 32
	'>='           reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'<'            reduce using rule 32
	'=='           reduce using rule 32
	']'            reduce using rule 32


State 70

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)
	YBool -> '-' '[' YBool . ']' '->' ident             (rule 30)

	'&&'           shift, and enter state 41
	'||'           shift, and enter state 42
	'!='           reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17
	']'            shift, and enter state 71


State 71

	YBool -> '-' '[' YBool ']' . '->' ident             (rule 30)

	'->'           shift, and enter state 90


State 72

	YBool -> ident '.' FIdent '==' . chars              (rule 34)

	chars          shift, and enter state 89


State 73

	Y -> ident '.' ARITH '(' . AddGrN ')'               (rule 14)

	FIdent         shift, and enter state 87
	ident          shift, and enter state 88

	AddGrN         goto state 84
	SetGrNNT       goto state 85
	SetGrNT        goto state 86

State 74

	Y -> ident '.' FIND '(' . ident '->' YBool ')'      (rule 13)

	ident          shift, and enter state 83


State 75

	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)
	YBool -> ident '-' '[' YBool . ']' '->'             (rule 31)
	YBool -> ident '-' '[' YBool . ']' '->' ident       (rule 33)
	YBool -> ident '-' '[' YBool . ']' '->' '_'         (rule 35)

	'&&'           shift, and enter state 41
	'||'           shift, and enter state 42
	'!='           reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17
	']'            shift, and enter state 82


State 76

	LoopFX -> LOOPF '(' Class ident . ':' ident ')' '{' XX '}'    (rule 46)

	':'            shift, and enter state 81


State 77

	ConditionX -> CONDITION '(' YBool ')' . '{' XX '}'    (rule 44)
	ConditionX -> CONDITION '(' YBool ')' . '{' XX '}' CONDITIONELIF '{' XX '}'    (rule 45)

	'{'            shift, and enter state 80


State 78

	Y -> OUT '(' ident ')' .                            (rule 16)

	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	')'            reduce using rule 16
	';'            reduce using rule 16
	'!='           reduce using rule 16
	','            reduce using rule 16
	'>='           reduce using rule 16
	'<='           reduce using rule 16
	'>'            reduce using rule 16
	'<'            reduce using rule 16
	'=='           reduce using rule 16
	']'            reduce using rule 16


State 79

	Y -> Class ident '=' Y .                            (rule 6)
	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)

	'&&'           reduce using rule 6
	'||'           reduce using rule 6
	')'            reduce using rule 6
	';'            reduce using rule 6
	'!='           shift, and enter state 44
			(reduce using rule 6)

	','            reduce using rule 6
	'>='           shift, and enter state 45
			(reduce using rule 6)

	'<='           shift, and enter state 46
			(reduce using rule 6)

	'>'            shift, and enter state 47
			(reduce using rule 6)

	'<'            shift, and enter state 48
			(reduce using rule 6)

	'=='           shift, and enter state 49
			(reduce using rule 6)

	']'            reduce using rule 6


State 80

	ConditionX -> CONDITION '(' YBool ')' '{' . XX '}'    (rule 44)
	ConditionX -> CONDITION '(' YBool ')' '{' . XX '}' CONDITIONELIF '{' XX '}'    (rule 45)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	CONDITION      shift, and enter state 10
	LOOPF          shift, and enter state 11
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	XX             goto state 100
	X              goto state 27
	Y              goto state 3
	YBool          goto state 4
	ConditionX     goto state 5
	LoopFX         goto state 6
	Class          goto state 7

State 81

	LoopFX -> LOOPF '(' Class ident ':' . ident ')' '{' XX '}'    (rule 46)

	ident          shift, and enter state 99


State 82

	YBool -> ident '-' '[' YBool ']' . '->'             (rule 31)
	YBool -> ident '-' '[' YBool ']' . '->' ident       (rule 33)
	YBool -> ident '-' '[' YBool ']' . '->' '_'         (rule 35)

	'->'           shift, and enter state 98


State 83

	Y -> ident '.' FIND '(' ident . '->' YBool ')'      (rule 13)

	'->'           shift, and enter state 97


State 84

	Y -> ident '.' ARITH '(' AddGrN . ')'               (rule 14)

	')'            shift, and enter state 96


State 85

	AddGrN -> SetGrNNT .                                (rule 38)

	')'            reduce using rule 38


State 86

	SetGrNNT -> SetGrNT .                               (rule 39)
	SetGrNNT -> SetGrNT . ',' SetGrNNT                  (rule 40)

	')'            reduce using rule 39
	','            shift, and enter state 95
	']'            reduce using rule 39


State 87

	SetGrNT -> FIdent . '=' Y                           (rule 42)

	'='            shift, and enter state 94


State 88

	AddGrN -> ident .                                   (rule 37)
	SetGrNT -> ident . '=' Y                            (rule 41)
	SetGrNT -> ident . '-' '[' SetGrNNT ']' '->' ident    (rule 43)

	')'            reduce using rule 37
	'='            shift, and enter state 92
	'-'            shift, and enter state 93


State 89

	YBool -> ident '.' FIdent '==' chars .              (rule 34)

	'&&'           reduce using rule 34
	'||'           reduce using rule 34
	')'            reduce using rule 34
	';'            reduce using rule 34
	'!='           reduce using rule 34
	','            reduce using rule 34
	'>='           reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'<'            reduce using rule 34
	'=='           reduce using rule 34
	']'            reduce using rule 34


State 90

	YBool -> '-' '[' YBool ']' '->' . ident             (rule 30)

	ident          shift, and enter state 91


State 91

	YBool -> '-' '[' YBool ']' '->' ident .             (rule 30)

	'&&'           reduce using rule 30
	'||'           reduce using rule 30
	')'            reduce using rule 30
	';'            reduce using rule 30
	'!='           reduce using rule 30
	','            reduce using rule 30
	'>='           reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'<'            reduce using rule 30
	'=='           reduce using rule 30
	']'            reduce using rule 30


State 92

	SetGrNT -> ident '=' . Y                            (rule 41)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 110
	YBool          goto state 4
	Class          goto state 7

State 93

	SetGrNT -> ident '-' . '[' SetGrNNT ']' '->' ident    (rule 43)

	'['            shift, and enter state 109


State 94

	SetGrNT -> FIdent '=' . Y                           (rule 42)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 108
	YBool          goto state 4
	Class          goto state 7

State 95

	SetGrNNT -> SetGrNT ',' . SetGrNNT                  (rule 40)

	FIdent         shift, and enter state 87
	ident          shift, and enter state 107

	SetGrNNT       goto state 106
	SetGrNT        goto state 86

State 96

	Y -> ident '.' ARITH '(' AddGrN ')' .               (rule 14)

	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	')'            reduce using rule 14
	';'            reduce using rule 14
	'!='           reduce using rule 14
	','            reduce using rule 14
	'>='           reduce using rule 14
	'<='           reduce using rule 14
	'>'            reduce using rule 14
	'<'            reduce using rule 14
	'=='           reduce using rule 14
	']'            reduce using rule 14


State 97

	Y -> ident '.' FIND '(' ident '->' . YBool ')'      (rule 13)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	Y              goto state 30
	YBool          goto state 105
	Class          goto state 7

State 98

	YBool -> ident '-' '[' YBool ']' '->' .             (rule 31)
	YBool -> ident '-' '[' YBool ']' '->' . ident       (rule 33)
	YBool -> ident '-' '[' YBool ']' '->' . '_'         (rule 35)

	ident          shift, and enter state 103
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	')'            reduce using rule 31
	';'            reduce using rule 31
	'!='           reduce using rule 31
	','            reduce using rule 31
	'>='           reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'<'            reduce using rule 31
	'=='           reduce using rule 31
	']'            reduce using rule 31
	'_'            shift, and enter state 104


State 99

	LoopFX -> LOOPF '(' Class ident ':' ident . ')' '{' XX '}'    (rule 46)

	')'            shift, and enter state 102


State 100

	ConditionX -> CONDITION '(' YBool ')' '{' XX . '}'    (rule 44)
	ConditionX -> CONDITION '(' YBool ')' '{' XX . '}' CONDITIONELIF '{' XX '}'    (rule 45)

	'}'            shift, and enter state 101


State 101

	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' .    (rule 44)
	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' . CONDITIONELIF '{' XX '}'    (rule 45)

	ACCESS         reduce using rule 44
	OUT            reduce using rule 44
	CONDITION      reduce using rule 44
	CONDITIONELIF  shift, and enter state 114
	LOOPF          reduce using rule 44
	Gr             reduce using rule 44
	Num            reduce using rule 44
	Chars          reduce using rule 44
	B              reduce using rule 44
	FIdent         reduce using rule 44
	GrN            reduce using rule 44
	Rel            reduce using rule 44
	True           reduce using rule 44
	False          reduce using rule 44
	ident          reduce using rule 44
	num            reduce using rule 44
	chars          reduce using rule 44
	'('            reduce using rule 44
	'-'            reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 102

	LoopFX -> LOOPF '(' Class ident ':' ident ')' . '{' XX '}'    (rule 46)

	'{'            shift, and enter state 113


State 103

	YBool -> ident '-' '[' YBool ']' '->' ident .       (rule 33)

	'&&'           reduce using rule 33
	'||'           reduce using rule 33
	')'            reduce using rule 33
	';'            reduce using rule 33
	'!='           reduce using rule 33
	','            reduce using rule 33
	'>='           reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'<'            reduce using rule 33
	'=='           reduce using rule 33
	']'            reduce using rule 33


State 104

	YBool -> ident '-' '[' YBool ']' '->' '_' .         (rule 35)

	'&&'           reduce using rule 35
	'||'           reduce using rule 35
	')'            reduce using rule 35
	';'            reduce using rule 35
	'!='           reduce using rule 35
	','            reduce using rule 35
	'>='           reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'<'            reduce using rule 35
	'=='           reduce using rule 35
	']'            reduce using rule 35


State 105

	Y -> ident '.' FIND '(' ident '->' YBool . ')'      (rule 13)
	Y -> YBool .                                        (rule 17)
	YBool -> YBool . '&&' YBool                         (rule 28)
	YBool -> YBool . '||' YBool                         (rule 29)

	'&&'           shift, and enter state 41
	'||'           shift, and enter state 42
	')'            shift, and enter state 112
	'!='           reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	'=='           reduce using rule 17


State 106

	SetGrNNT -> SetGrNT ',' SetGrNNT .                  (rule 40)

	')'            reduce using rule 40
	']'            reduce using rule 40


State 107

	SetGrNT -> ident . '=' Y                            (rule 41)
	SetGrNT -> ident . '-' '[' SetGrNNT ']' '->' ident    (rule 43)

	'='            shift, and enter state 92
	'-'            shift, and enter state 93


State 108

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)
	SetGrNT -> FIdent '=' Y .                           (rule 42)

	')'            reduce using rule 42
	'!='           shift, and enter state 44
	','            reduce using rule 42
	'>='           shift, and enter state 45
	'<='           shift, and enter state 46
	'>'            shift, and enter state 47
	'<'            shift, and enter state 48
	'=='           shift, and enter state 49
	']'            reduce using rule 42


State 109

	SetGrNT -> ident '-' '[' . SetGrNNT ']' '->' ident    (rule 43)

	FIdent         shift, and enter state 87
	ident          shift, and enter state 107

	SetGrNNT       goto state 111
	SetGrNT        goto state 86

State 110

	YBool -> Y . '==' Y                                 (rule 22)
	YBool -> Y . '!=' Y                                 (rule 23)
	YBool -> Y . '<' Y                                  (rule 24)
	YBool -> Y . '>' Y                                  (rule 25)
	YBool -> Y . '<=' Y                                 (rule 26)
	YBool -> Y . '>=' Y                                 (rule 27)
	SetGrNT -> ident '=' Y .                            (rule 41)

	')'            reduce using rule 41
	'!='           shift, and enter state 44
	','            reduce using rule 41
	'>='           shift, and enter state 45
	'<='           shift, and enter state 46
	'>'            shift, and enter state 47
	'<'            shift, and enter state 48
	'=='           shift, and enter state 49
	']'            reduce using rule 41


State 111

	SetGrNT -> ident '-' '[' SetGrNNT . ']' '->' ident    (rule 43)

	']'            shift, and enter state 117


State 112

	Y -> ident '.' FIND '(' ident '->' YBool ')' .      (rule 13)

	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	')'            reduce using rule 13
	';'            reduce using rule 13
	'!='           reduce using rule 13
	','            reduce using rule 13
	'>='           reduce using rule 13
	'<='           reduce using rule 13
	'>'            reduce using rule 13
	'<'            reduce using rule 13
	'=='           reduce using rule 13
	']'            reduce using rule 13


State 113

	LoopFX -> LOOPF '(' Class ident ':' ident ')' '{' . XX '}'    (rule 46)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	CONDITION      shift, and enter state 10
	LOOPF          shift, and enter state 11
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	XX             goto state 116
	X              goto state 27
	Y              goto state 3
	YBool          goto state 4
	ConditionX     goto state 5
	LoopFX         goto state 6
	Class          goto state 7

State 114

	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' CONDITIONELIF . '{' XX '}'    (rule 45)

	'{'            shift, and enter state 115


State 115

	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' CONDITIONELIF '{' . XX '}'    (rule 45)

	ACCESS         shift, and enter state 8
	OUT            shift, and enter state 9
	CONDITION      shift, and enter state 10
	LOOPF          shift, and enter state 11
	Gr             shift, and enter state 12
	Num            shift, and enter state 13
	Chars          shift, and enter state 14
	B              shift, and enter state 15
	FIdent         shift, and enter state 16
	GrN            shift, and enter state 17
	Rel            shift, and enter state 18
	True           shift, and enter state 19
	False          shift, and enter state 20
	ident          shift, and enter state 21
	num            shift, and enter state 22
	chars          shift, and enter state 23
	'('            shift, and enter state 24
	'-'            shift, and enter state 25

	XX             goto state 120
	X              goto state 27
	Y              goto state 3
	YBool          goto state 4
	ConditionX     goto state 5
	LoopFX         goto state 6
	Class          goto state 7

State 116

	LoopFX -> LOOPF '(' Class ident ':' ident ')' '{' XX . '}'    (rule 46)

	'}'            shift, and enter state 119


State 117

	SetGrNT -> ident '-' '[' SetGrNNT ']' . '->' ident    (rule 43)

	'->'           shift, and enter state 118


State 118

	SetGrNT -> ident '-' '[' SetGrNNT ']' '->' . ident    (rule 43)

	ident          shift, and enter state 122


State 119

	LoopFX -> LOOPF '(' Class ident ':' ident ')' '{' XX '}' .    (rule 46)

	ACCESS         reduce using rule 46
	OUT            reduce using rule 46
	CONDITION      reduce using rule 46
	LOOPF          reduce using rule 46
	Gr             reduce using rule 46
	Num            reduce using rule 46
	Chars          reduce using rule 46
	B              reduce using rule 46
	FIdent         reduce using rule 46
	GrN            reduce using rule 46
	Rel            reduce using rule 46
	True           reduce using rule 46
	False          reduce using rule 46
	ident          reduce using rule 46
	num            reduce using rule 46
	chars          reduce using rule 46
	'('            reduce using rule 46
	'-'            reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 120

	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' CONDITIONELIF '{' XX . '}'    (rule 45)

	'}'            shift, and enter state 121


State 121

	ConditionX -> CONDITION '(' YBool ')' '{' XX '}' CONDITIONELIF '{' XX '}' .    (rule 45)

	ACCESS         reduce using rule 45
	OUT            reduce using rule 45
	CONDITION      reduce using rule 45
	LOOPF          reduce using rule 45
	Gr             reduce using rule 45
	Num            reduce using rule 45
	Chars          reduce using rule 45
	B              reduce using rule 45
	FIdent         reduce using rule 45
	GrN            reduce using rule 45
	Rel            reduce using rule 45
	True           reduce using rule 45
	False          reduce using rule 45
	ident          reduce using rule 45
	num            reduce using rule 45
	chars          reduce using rule 45
	'('            reduce using rule 45
	'-'            reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 122

	SetGrNT -> ident '-' '[' SetGrNNT ']' '->' ident .    (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	']'            reduce using rule 43


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 53
Number of terminals: 43
Number of non-terminals: 11
Number of states: 123
